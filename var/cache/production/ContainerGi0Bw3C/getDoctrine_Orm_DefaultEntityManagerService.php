<?php

namespace ContainerGi0Bw3C;


use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getDoctrine_Orm_DefaultEntityManagerService extends App_KernelProductionContainer
{
    /*
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public static function do($container, $lazyLoad = true)
    {
        if ($lazyLoad) {
            return $container->services['doctrine.orm.default_entity_manager'] = $container->createProxy('EntityManager_9a5be93', function () use ($container) {
                return \EntityManager_9a5be93::staticProxyConstructor(function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) use ($container) {
                    $wrappedInstance = self::do($container, false);

                    $proxy->setProxyInitializer(null);

                    return true;
                });
            });
        }

        $a = new \Doctrine\ORM\Configuration();

        $b = new \Doctrine\Persistence\Mapping\Driver\MappingDriverChain();

        $c = new \Doctrine\ORM\Mapping\Driver\SimplifiedXmlDriver([(\dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'vich'.\DIRECTORY_SEPARATOR.'uploader-bundle'.\DIRECTORY_SEPARATOR.'config'.\DIRECTORY_SEPARATOR.'doctrine') => 'Vich\\UploaderBundle\\Entity']);
        $c->setGlobalBasename('mapping');

        $b->addDriver(new \Doctrine\ORM\Mapping\Driver\AttributeDriver([0 => (\dirname(__DIR__, 4).''.\DIRECTORY_SEPARATOR.'src'.\DIRECTORY_SEPARATOR.'Entity')]), 'App\\Entity');
        $b->addDriver($c, 'Vich\\UploaderBundle\\Entity');

        $a->setEntityNamespaces(['App' => 'App\\Entity', 'VichUploaderBundle' => 'Vich\\UploaderBundle\\Entity']);
        $a->setMetadataCache(new \Symfony\Component\Cache\Adapter\PhpArrayAdapter(($container->targetDir.''.'/doctrine/orm/default_metadata.php'), new \Symfony\Component\Cache\Adapter\ArrayAdapter()));
        $a->setQueryCache(($container->privates['cache.doctrine.orm.default.query'] ?? ($container->privates['cache.doctrine.orm.default.query'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter())));
        $a->setResultCache(($container->privates['cache.doctrine.orm.default.result'] ?? ($container->privates['cache.doctrine.orm.default.result'] = new \Symfony\Component\Cache\Adapter\ArrayAdapter())));
        $a->setMetadataDriverImpl(new \Doctrine\Bundle\DoctrineBundle\Mapping\MappingDriver($b, new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'doctrine.ulid_generator' => ['privates', 'doctrine.ulid_generator', 'getDoctrine_UlidGeneratorService', true],
            'doctrine.uuid_generator' => ['privates', 'doctrine.uuid_generator', 'getDoctrine_UuidGeneratorService', true],
        ], [
            'doctrine.ulid_generator' => '?',
            'doctrine.uuid_generator' => '?',
        ])));
        $a->setProxyDir(($container->targetDir.''.'/doctrine/orm/Proxies'));
        $a->setProxyNamespace('Proxies');
        $a->setAutoGenerateProxyClasses(true);
        $a->setClassMetadataFactoryName('Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ClassMetadataFactory');
        $a->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $a->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy(0, true));
        $a->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $a->setEntityListenerResolver(new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerEntityListenerResolver($container));
        $a->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'App\\Repository\\InnKat1Repository' => ['privates', 'App\\Repository\\InnKat1Repository', 'getInnKat1RepositoryService', true],
            'App\\Repository\\InnKat2Repository' => ['privates', 'App\\Repository\\InnKat2Repository', 'getInnKat2RepositoryService', true],
            'App\\Repository\\InnKat3Repository' => ['privates', 'App\\Repository\\InnKat3Repository', 'getInnKat3RepositoryService', true],
            'App\\Repository\\InnKat4Repository' => ['privates', 'App\\Repository\\InnKat4Repository', 'getInnKat4RepositoryService', true],
            'App\\Repository\\KadrKat1Repository' => ['privates', 'App\\Repository\\KadrKat1Repository', 'getKadrKat1RepositoryService', true],
            'App\\Repository\\KadrKat2Repository' => ['privates', 'App\\Repository\\KadrKat2Repository', 'getKadrKat2RepositoryService', true],
            'App\\Repository\\KadrKat3Repository' => ['privates', 'App\\Repository\\KadrKat3Repository', 'getKadrKat3RepositoryService', true],
            'App\\Repository\\KadrKat4Repository' => ['privates', 'App\\Repository\\KadrKat4Repository', 'getKadrKat4RepositoryService', true],
            'App\\Repository\\KsieKat1Repository' => ['privates', 'App\\Repository\\KsieKat1Repository', 'getKsieKat1RepositoryService', true],
            'App\\Repository\\KsieKat2Repository' => ['privates', 'App\\Repository\\KsieKat2Repository', 'getKsieKat2RepositoryService', true],
            'App\\Repository\\KsieKat3Repository' => ['privates', 'App\\Repository\\KsieKat3Repository', 'getKsieKat3RepositoryService', true],
            'App\\Repository\\MarKat1Repository' => ['privates', 'App\\Repository\\MarKat1Repository', 'getMarKat1RepositoryService', true],
            'App\\Repository\\MarKat2Repository' => ['privates', 'App\\Repository\\MarKat2Repository', 'getMarKat2RepositoryService', true],
            'App\\Repository\\MarKat3Repository' => ['privates', 'App\\Repository\\MarKat3Repository', 'getMarKat3RepositoryService', true],
            'App\\Repository\\SprzKat1Repository' => ['privates', 'App\\Repository\\SprzKat1Repository', 'getSprzKat1RepositoryService', true],
            'App\\Repository\\SprzKat2Repository' => ['privates', 'App\\Repository\\SprzKat2Repository', 'getSprzKat2RepositoryService', true],
            'App\\Repository\\SprzKat3Repository' => ['privates', 'App\\Repository\\SprzKat3Repository', 'getSprzKat3RepositoryService', true],
            'App\\Repository\\SprzKat4Repository' => ['privates', 'App\\Repository\\SprzKat4Repository', 'getSprzKat4RepositoryService', true],
            'App\\Repository\\UsersRepository' => ['privates', 'App\\Repository\\UsersRepository', 'getUsersRepositoryService', true],
        ], [
            'App\\Repository\\InnKat1Repository' => '?',
            'App\\Repository\\InnKat2Repository' => '?',
            'App\\Repository\\InnKat3Repository' => '?',
            'App\\Repository\\InnKat4Repository' => '?',
            'App\\Repository\\KadrKat1Repository' => '?',
            'App\\Repository\\KadrKat2Repository' => '?',
            'App\\Repository\\KadrKat3Repository' => '?',
            'App\\Repository\\KadrKat4Repository' => '?',
            'App\\Repository\\KsieKat1Repository' => '?',
            'App\\Repository\\KsieKat2Repository' => '?',
            'App\\Repository\\KsieKat3Repository' => '?',
            'App\\Repository\\MarKat1Repository' => '?',
            'App\\Repository\\MarKat2Repository' => '?',
            'App\\Repository\\MarKat3Repository' => '?',
            'App\\Repository\\SprzKat1Repository' => '?',
            'App\\Repository\\SprzKat2Repository' => '?',
            'App\\Repository\\SprzKat3Repository' => '?',
            'App\\Repository\\SprzKat4Repository' => '?',
            'App\\Repository\\UsersRepository' => '?',
        ])));

        $instance = \Doctrine\ORM\EntityManager::create(($container->services['doctrine.dbal.default_connection'] ?? $container->load('getDoctrine_Dbal_DefaultConnectionService')), $a);

        (new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator([], []))->configure($instance);

        return $instance;
    }
}
